<?php

    // üîó Inclusion du module CSRF

    /**
     * üîê CSRF Protection ‚Äî S√©curisation des formulaires
     * 
     * Ce module prot√®ge les formulaires contre les attaques de type Cross-Site Request Forgery.
     * Il g√©n√®re un token unique, le v√©rifie √† la soumission, et le d√©truit apr√®s usage.
     * Un token consomm√© est un token √† oublier imm√©diatement üí•
     */

    /**
     * üö™ D√©marre la session si elle n‚Äôest pas d√©j√† active
     * - N√©cessaire pour stocker les tokens CSRF
     */
    if (session_status() !== PHP_SESSION_ACTIVE) {
        session_start();
    }

    /** ‚è≥ Dur√©e de vie du token en secondes */
    if (!defined('CSRF_TOKEN_LIFETIME')){
        define('CSRF_TOKEN_LIFETIME', 600);
    }

    /**
     * üß¨ G√©n√®re un token CSRF unique et s√©curis√© pour un formulaire sp√©cifique
     * - Stocke le token brut, son hash, et l'heure de cr√©ation dans $_SESSION['csrf_tokens'][$formId]
     * - Retourne le token brut √† ins√©rer dans le formulaire identifi√© par $formId
     */
    function generateCsrfToken(string $formId) {
    $rawToken = bin2hex(random_bytes(32));
        $_SESSION['csrf_tokens'][$formId] = [
            'raw' => $rawToken,
            'hash' => password_hash($rawToken, PASSWORD_ARGON2ID),
            'time' => time()
        ];
        return $rawToken;
    }


    /**
     * üîÅ R√©cup√®re le token CSRF actuel pour un formulaire sp√©cifique
     * - Si aucun token ou expir√© ‚Üí en g√©n√®re un nouveau
     * - Sinon, retourne le token brut stock√© pour $formId
     */
    function getCsrfToken(string $formId) {
        if (!isset($_SESSION['csrf_tokens'][$formId]['raw'], $_SESSION['csrf_tokens'][$formId]['time']) ||
            (time() - $_SESSION['csrf_tokens'][$formId]['time']) > CSRF_TOKEN_LIFETIME) {
            return generateCsrfToken($formId);
        }
        return $_SESSION['csrf_tokens'][$formId]['raw'];
    }


    /**
     * ‚úÖ V√©rifie la validit√© du token CSRF pour un formulaire sp√©cifique
     * - Retourne 'valid', 'expired' ou 'invalid'
     */
    function validateCsrfToken(string $formId, string $token) {
        if (!isset($_SESSION['csrf_tokens'][$formId]['hash'], $_SESSION['csrf_tokens'][$formId]['time'])) {
            return 'invalid';
        }
        $expired = (time() - $_SESSION['csrf_tokens'][$formId]['time']) > CSRF_TOKEN_LIFETIME;
        if ($expired) {
            return 'expired';
        }
        return password_verify($token, $_SESSION['csrf_tokens'][$formId]['hash']) ? 'valid' : 'invalid';
    }


    /**
     * üí• Supprime le token CSRF d‚Äôun formulaire sp√©cifique apr√®s utilisation
     * - Emp√™che toute r√©utilisation (replay)
     */
    function destroyCsrfToken(string $formId) {
        unset($_SESSION['csrf_tokens'][$formId]);
    }

    /**
     * üõ°Ô∏è V√©rifie le token CSRF d‚Äôun formulaire sp√©cifique et interrompt le traitement en cas d‚Äô√©chec
     * - G√®re les cas de token expir√© ‚è≥ ou falsifi√© üö´
     * - D√©truit le token apr√®s v√©rification
     * - Affiche un message clair et stoppe le script si le token est invalide
     */
    function checkCsrfOrDie(string $formId, string $token) {
        $status = validateCsrfToken($formId, $token);
        if ($status === 'expired') {
            destroyCsrfToken($formId);
            die("‚è≥ Le token CSRF pour ¬´ $formId ¬ª a expir√©. Veuillez recharger la page et r√©essayer.");
        }
        if ($status === 'invalid') {
            destroyCsrfToken($formId);
            die("üö´ Le token CSRF pour ¬´ $formId ¬ª est invalide ou falsifi√©. Requ√™te bloqu√©e.");
        }
        // ‚úÖ Token valide ‚Üí on continue
    }

    /**
     * üìõ Enregistre une tentative CSRF √©chou√©e dans le fichier de logs
     * - Utilise logAction() avec l‚Äôaction "csrf_failure"
     * - Inclut l‚Äôadresse IP et √©ventuellement l‚ÄôID utilisateur
     */
    function logCsrfFailure(string $ipAddress, $userId = 'system'): bool {
        $details = "Tentative CSRF √©chou√©e depuis l‚ÄôIP : $ipAddress";
        return logAction('csrf_failure', $details, $userId);
    }

?>
<?php

    // ‚öôÔ∏è Traitement
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        $formId = $_POST['form_id'] ?? 'default_form';

        $status = validateCsrfToken($formId, $_POST['csrf_token'] ?? '');
        if ($status === 'expired') {
            destroyCsrfToken($formId);
            $message = '<div class="alert alert-warning">‚è≥ Le token CSRF a expir√©. Rechargez la page.</div>';
        } elseif ($status === 'invalid') {
            logCsrfFailure($_SERVER['REMOTE_ADDR']);
            destroyCsrfToken($formId);
            $message = '<div class="alert alert-danger">üö´ Token CSRF falsifi√©. Requ√™te bloqu√©e.</div>';
        } else {
            destroyCsrfToken($formId);
            $message = '<div class="alert alert-success">‚úÖ Formulaire trait√© avec succ√®s !</div>';
        }
    }

?>
<!Doctype HTML>
<HTML lang="fr">
    <Head>
        <meta charset="UTF-8">
        <Title>Formulaire s√©curis√©</Title>
        <!-- üé® Bootstrap 5 CDN -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    </Head>
    <Body class="bg-light"> 
    <div class="container mt-5">
        <script>
            let startTime = Date.now();

            function updateCsrfTimer() {
                const now = Date.now();
                const elapsedSeconds = Math.floor((now - startTime) / 1000);
                document.getElementById('csrf-timer').textContent = elapsedSeconds + 's';
            }

            // Met √† jour toutes les secondes
            setInterval(updateCsrfTimer, 1000);
        </script>
        <div class="d-flex justify-content-center my-4">
            <div class="alert alert-info text-center">
                ‚è±Ô∏è Temps √©coul√© depuis le chargement : <strong id="csrf-timer">0s</strong>
            </div>
        </div>
        <!-- üßº Zone d‚Äôalerte bien int√©gr√©e -->
        <?php if (!empty($message)){ echo $message; } ?>
        <div class="container-sm mb-5 p-4 bg-light border rounded-3 shadow-sm">
            <h2 class="mb-4">üîê Formulaire avec protection CSRF 1</h2>
            <form method="POST" action="" class="card p-4 shadow-sm bg-white">
                <div class="mb-3">
                    <label for="username" class="form-label">Nom d'utilisateur</label>
                    <input type="text" name="username" id="username" class="form-control" required>
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Mot de passe</label>
                    <input type="password" name="password" id="password" class="form-control" required>
                </div>
                <!-- üîê Champ cach√© contenant le token CSRF -->
                <input type="hidden" name="form_id" value="form_profile">
                <input type="hidden" name="csrf_token" value="<?= htmlspecialchars(getCsrfToken('form_profile')) ?>">
                <button type="submit" class="btn btn-primary">Envoyer</button>
            </form>
        </div>
        <div class="container-sm mb-5 p-4 bg-light border rounded-3 shadow-sm">
            <h2 class="mb-4">üîê Formulaire avec protection CSRF 2</h2>
            <form method="POST" action="" class="card p-4 shadow-sm bg-white">
                <div class="mb-3">
                    <label for="username" class="form-label">Nom d'utilisateur</label>
                    <input type="text" name="username" id="username" class="form-control" required>
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Mot de passe</label>
                    <input type="password" name="password" id="password" class="form-control" required>
                </div>
                <!-- üîê Champ cach√© contenant le token CSRF -->
                <input type="hidden" name="form_id" value="form_profile2">
                <input type="hidden" name="csrf_token" value="<?= htmlspecialchars(getCsrfToken('form_profile2')) ?>">
                <button type="submit" class="btn btn-primary">Envoyer</button>
            </form>
        </div>
    </div>
    <!-- üß© Bootstrap JS (optionnel) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    </Body>
</HTML>
